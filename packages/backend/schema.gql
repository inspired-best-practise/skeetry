# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input ActionCityInput {
  id: ID!
  type: String!
}

type Auth {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
  user: User!
}

"""The Integer as string"""
scalar BigInt

input CitiesInput {
  cityTagId: ID!
}

type City {
  id: String!
  images: [Image!]
  latitude: Float
  longitude: Float
  name: String!
  overview: String
  population: BigInt!
  userVisited: [User!]
  userWanted: [User!]
  visitedCount: Int!
  wantedCount: Int!
}

type CityConnection {
  edges: [CityEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type CityEdge {
  cursor: String!
  node: City!
}

input CityOrder {
  direction: OrderDirection!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Image {
  city: [City!]

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  urlRegular: String!
  urlSmall: String!
  urlThumb: String!
}

enum Locale {
  EN
  RU
}

input LoginInput {
  password: String!
  username: String!
}

type Mutation {
  addCity(input: ActionCityInput!): City!
  confirmSmsCode(code: String!, phone: String!): Boolean!
  deletePhoto: Boolean!
  login(input: LoginInput!): Auth!
  moveCity(input: ActionCityInput!): City!
  refreshToken: Token!
  removeCity(input: ActionCityInput!): City!
  sendSmsCode(phone: String!): Boolean!
  signup(input: SignupInput!): Auth!
  uploadPhoto(file: Upload!): Boolean!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  cities(after: String, before: String, first: Int!, input: CitiesInput, last: Int, orderBy: CityOrder, query: String, skip: Int): CityConnection!
  city(id: String!): City!
  me: User!
  nearby(after: String, before: String, first: Int!, last: Int, orderBy: CityOrder, skip: Int): CityConnection!
  popular(after: String, before: String, first: Int!, last: Int, orderBy: CityOrder, skip: Int): CityConnection!
  stories: [Story!]!
  tags: [Tag!]!
  user(id: String!): User!
  users(after: String, before: String, first: Int!, last: Int, orderBy: UserOrder, query: String, skip: Int): UserConnection!
  visited(after: String, before: String, first: Int!, last: Int, orderBy: CityOrder, skip: Int, userId: String): CityConnection!
  wanted(after: String, before: String, first: Int!, last: Int, orderBy: CityOrder, skip: Int, userId: String): CityConnection!
}

input SignupInput {
  code: String!
  password: String!
  phone: String!
  username: String!
}

type Story {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String!
  id: ID!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Tag {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  emoji: String!
  id: ID!
  localizations: [TagLocalization!]
  name: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type TagLocalization {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  locale: Locale!
  name: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Token {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatar: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  phone: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  username: String!
  visitedCount: Int!
  wantedCount: Int!
}

type UserConnection {
  edges: [UserEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdge {
  cursor: String!
  node: User!
}

input UserOrder {
  direction: OrderDirection!
}
