// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model User {
  id           String   @id @default(cuid())
  username     String   @unique
  name         String?
  avatar       String?
  bio          String?
  phone        String   @unique
  verified     Boolean  @default(false)
  wanted       City[]   @relation("WantedCity")
  visited      City[]   @relation("VisitedCity")
  wantedCount  Int      @default(0)
  visitedCount Int      @default(0)
  rating       Int?
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model Country {
  id             String                @id @default(cuid())
  pk             Int                   @unique
  name           String                @unique
  iso2           String?
  iso3           String?
  numericCode    String?
  phoneCode      String?
  currency       String?
  currencySymbol String?
  tld            String?
  native         String?
  continent      Continent
  subregion      String?
  latitude       String?
  longitude      String?
  emoji          String?
  emojiU         String?
  overview       String?
  states         State[]
  localizations  CountryLocalization[]
}

model CountryLocalization {
  id        String   @id @default(cuid())
  name      String   @unique
  overview  String?
  locale    Locale
  country   Country? @relation(fields: [countryId], references: [id])
  countryId String?
}

model State {
  id            String              @id @default(cuid())
  pk            Int                 @unique
  name          String
  stateCode     String?
  latitude      String?
  longitude     String?
  overview      String?
  cities        City[]
  country       Country             @relation(fields: [countryId], references: [id])
  countryId     String
  localizations StateLocalization[]
}

model StateLocalization {
  id       String  @id @default(cuid())
  name     String
  overview String?
  state    State   @relation(fields: [stateId], references: [id])
  stateId  String
}

model City {
  id            String             @id @default(cuid())
  pk            Int                @unique
  name          String
  images        Image[]
  latitude      String
  longitude     String
  wantedCount   Int                @default(0)
  visitedCount  Int                @default(0)
  overview      String?
  isCapital     Boolean            @default(false)
  state         State              @relation(fields: [stateId], references: [id])
  stateId       String
  tags          Tag[]
  userWanted    User[]             @relation("WantedCity")
  userVisited   User[]             @relation("VisitedCity")
  localizations CityLocalization[]
}

model CityLocalization {
  id       String  @id @default(cuid())
  locale   Locale
  name     String
  overview String?
  city     City    @relation(fields: [cityId], references: [id])
  cityId   String
}

model Image {
  id         String  @id @default(cuid())
  urlRegular String?
  urlSmall   String?
  urlThumb   String?
  city       City?   @relation(fields: [cityId], references: [id])
  cityId     String?
}

model Tag {
  id            String            @id @default(cuid())
  name          String            @unique
  emoji         String
  cities        City[]
  cityId        String
  localizations TagLocalization[]
}

model TagLocalization {
  id     String @id @default(cuid())
  locale Locale
  name   String
  tag    Tag    @relation(fields: [tagId], references: [id])
  tagId  String
}

model Story {
  id            String              @id @default(cuid())
  previewTitle  String
  previewImage  String
  steps         StoryStep[]
  localizations StoryLocalization[]
}

model StoryLocalization {
  id           String  @id @default(cuid())
  locale       Locale
  previewTitle String
  story        Story?  @relation(fields: [storyId], references: [id])
  storyId      String?
}

model StoryStep {
  id            String                  @id @default(cuid())
  title         String
  description   String
  image         String
  story         Story?                  @relation(fields: [storyId], references: [id])
  storyId       String?
  localizations StoryStepLocalization[]
}

model StoryStepLocalization {
  id          String     @id @default(cuid())
  locale      Locale
  title       String
  description String
  StoryStep   StoryStep? @relation(fields: [storyStepId], references: [id])
  storyStepId String?
}

model Sms {
  id        String   @id @default(cuid())
  phone     String
  code      String
  confirmed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Continent {
  ASIA
  AFRICA
  AMERICAS
  POLAR
  EUROPE
  OCEANIA
  ISLAND
}

enum Locale {
  RU
}
