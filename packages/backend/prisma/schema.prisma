generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id           String   @id @default(cuid())
  username     String   @unique
  name         String?
  avatar       String?
  bio          String?
  phone        String   @unique
  verified     Boolean  @default(false)
  wantedCount  Int      @default(0)
  visitedCount Int      @default(0)
  rating       Int?
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  visited      City[]   @relation("VisitedCity")
  wanted       City[]   @relation("WantedCity")
}

model Country {
  id             String                @id @default(cuid())
  name           String                @unique
  iso2           String?
  iso3           String?
  numericCode    String?
  phoneCode      String?
  currency       String?
  currencySymbol String?
  tld            String?
  native         String?
  continent      Continent
  subregion      String?
  latitude       String?
  emoji          String?
  emojiU         String?
  overview       String?
  pk             Int                   @unique
  longitude      String?
  localizations  CountryLocalization[]
  states         State[]
}

model CountryLocalization {
  id        String   @id @default(cuid())
  name      String   @unique
  overview  String?
  locale    Locale
  countryId String?
  country   Country? @relation(fields: [countryId], references: [id])
}

model State {
  id            String              @id @default(cuid())
  name          String
  stateCode     String?
  latitude      String?
  overview      String?
  countryId     String
  pk            Int                 @unique
  longitude     String?
  country       Country             @relation(fields: [countryId], references: [id])
  cities        City[]
  localizations StateLocalization[]
}

model StateLocalization {
  id       String  @id @default(cuid())
  name     String
  locale   Locale  @default(RU)
  overview String?
  stateId  String
  state    State   @relation(fields: [stateId], references: [id])
}

model City {
  id            String             @id @default(cuid())
  name          String
  area          String?
  region        String?
  latitude      String?
  longitude     String?
  wantedCount   Int                @default(0)
  visitedCount  Int                @default(0)
  popularity    Int                @default(0)
  overview      String?
  isCapital     Boolean            @default(false)
  stateId       String
  pk            Int                @unique
  state         State              @relation(fields: [stateId], references: [id])
  localizations CityLocalization[]
  images        Image[]
  tags          Tag[]
  userVisited   User[]             @relation("VisitedCity")
  userWanted    User[]             @relation("WantedCity")
}

model CityLocalization {
  id       String  @id @default(cuid())
  locale   Locale
  name     String
  overview String?
  cityId   String
  city     City    @relation(fields: [cityId], references: [id])
}

model Image {
  id         String  @id @default(cuid())
  cityId     String?
  urlRegular String?
  urlSmall   String?
  urlThumb   String?
  city       City?   @relation(fields: [cityId], references: [id])
}

model Tag {
  id            String            @id @default(cuid())
  name          String            @unique
  emoji         String
  cityId        String
  localizations TagLocalization[]
  cities        City[]
}

model TagLocalization {
  id     String @id @default(cuid())
  locale Locale
  name   String
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id])
}

model Story {
  id            String              @id @default(cuid())
  previewTitle  String
  previewImage  String
  localizations StoryLocalization[]
  steps         StoryStep[]
}

model StoryLocalization {
  id           String  @id @default(cuid())
  locale       Locale
  previewTitle String
  storyId      String?
  story        Story?  @relation(fields: [storyId], references: [id])
}

model StoryStep {
  id            String                  @id @default(cuid())
  title         String
  description   String
  image         String
  storyId       String?
  story         Story?                  @relation(fields: [storyId], references: [id])
  localizations StoryStepLocalization[]
}

model StoryStepLocalization {
  id          String     @id @default(cuid())
  locale      Locale
  title       String
  description String
  storyStepId String?
  StoryStep   StoryStep? @relation(fields: [storyStepId], references: [id])
}

model Sms {
  id        String   @id @default(cuid())
  phone     String
  code      String
  confirmed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Continent {
  AFRICA
  ASIA
  EUROPE
  NORTH_AMERICA
  SOUTH_AMERICA
  ANTARCTICA
  AUSTRALIA
  ISLAND
  OCEANIA
}

enum Locale {
  RU
}
